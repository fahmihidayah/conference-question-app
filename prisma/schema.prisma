generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres.xcmbintaeueklcrvbfez:Test@123@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres" 
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  password         String?
  emailVerified    DateTime?
  image            String?
  stripeCustomerId String?   @unique

  conferences      Conference[] // One-to-many
  isActive         Boolean   @default(false)
  accounts         Account[]
  sessions         Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conference {
  id          String      @id @default(cuid())
  title       String
  description String?
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  questions   Question[]  // One-to-many
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Question {
  id            String     @id @default(cuid())
  name          String     // name of participant
  question      String     // the actual question
  conferenceId  String
  conference    Conference @relation(fields: [conferenceId], references: [id])
  createdAt     DateTime   @default(now())
}